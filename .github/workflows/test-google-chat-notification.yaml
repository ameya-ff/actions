# GitHub action that sends a message to Google Chat
# When action is triggered, it sends a message to Google Chat with the status of the action
# When the action is successful, it updates the message with the status of the action
# When the action fails, it updates the message with the status of the action and the error message

name: Google Chat Notification

on:
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Send initial message
        id: send_message
        env:
          BRANCH_OR_TAG: ${{ github.event.client_payload.git-ref || github.event.inputs.git-ref }}
          ENV: ${{ github.event.client_payload.env || github.event.inputs.env }}
          GOOGLE_CHAT_WEBHOOK: ${{ secrets.GOOGLE_CHAT_BUILDS_WEBHOOK }}
        run: |
          # Store the full response
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "text": "üîÑ Workflow started: ${{ github.workflow }}\nEnv: $ENV\nBranch: $BRANCH_OR_TAG\nTriggered by: ${{ github.actor }}"
            }' \
            $GOOGLE_CHAT_WEBHOOK)
          
          echo "Response: $RESPONSE"
          MESSAGE_ID=$(echo "$RESPONSE" | jq -r '.name // empty')
          echo "Extracted message ID: $MESSAGE_ID"
          
          if [ -n "$MESSAGE_ID" ]; then
            echo "message_id=$MESSAGE_ID" >> $GITHUB_OUTPUT
            
            # Parse webhook URL to prepare for updates
            WEBHOOK_URL="${{ secrets.GOOGLE_CHAT_WEBHOOK }}"
            BASE_URL=$(echo "$WEBHOOK_URL" | cut -d'?' -f1)
            QUERY_PARAMS=$(echo "$WEBHOOK_URL" | grep -o '?.*$')
            echo "update_url=${BASE_URL}/${MESSAGE_ID}${QUERY_PARAMS}" >> $GITHUB_OUTPUT
          else
            echo "Failed to extract message ID"
          fi
      
      - name: Run tests
        id: tests
        if: steps.send_message.outputs.message_id != ''
        run: |
          # Replace with your actual test command
          echo "Running tests..."
          # Add artificial delay to simulate long-running tests
          echo "Simulating long-running tests..."
          sleep 30
          echo "Tests completed!"
          exit 0
      
      - name: Update message on success
        if: success() && steps.send_message.outputs.message_id != ''
        run: |
          curl -s -X PUT \
            -H "Content-Type: application/json" \
            -d '{
              "text": "‚úÖ Workflow succeeded: ${{ github.workflow }}\nRepo: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nTriggered by: ${{ github.actor }}"
            }' \
            "${{ steps.send_message.outputs.update_url }}"
      
      - name: Update message on failure
        if: failure() && steps.send_message.outputs.message_id != ''
        run: |
          curl -s -X PUT \
            -H "Content-Type: application/json" \
            -d '{
              "text": "‚ùå Workflow failed: ${{ github.workflow }}\nRepo: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nTriggered by: ${{ github.actor }}\nError: Job failed with status ${{ job.status }}"
            }' \
            "${{ steps.send_message.outputs.update_url }}"
